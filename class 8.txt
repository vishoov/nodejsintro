API Security Best Practices 


rate limiting-> express-rate-limiting
password encryption -> bcrypt
user authentication -> jsonwebtoken
env variable-> dotenv 
server security -> CORs cross origin resource sharing 


Rate limiting -> DDoS -> hackers send huge amount of fake requests on our server

Limit the number of requests recieved from a client 
record

client         requests
129.168.0.1     2


Limit -> 10 requests in 1 hour 


Middlewares -> are implemented before any route or before the data is saved in the database 


Usage:

npm install express-rate-limit

const limit = ({
    specification of the rate limiter 
})

client-> rate limit ->route 


Password Encryption 

Encrypt/Hash 

password -> fohwopgfpuhlkn/.n;oy9y;lfb/,mnl;fhpb

//internal algorithm 

password + salt (algorithm)= hashed password  
'vishoo' + 'thisisaveryfunnysalt' = 3969639yofolb.9goolblbl.iovidovofv
salt -> string secret key 


signup -> 
updatepassword -> 

user information send --> hash --> database store  

Usage:

npm i bcrypt 


JWT json web token 


-> user login -> token generate -> client side save -> token verify 
-> authentication
-> token format 
-> header.payload.signature 

->header = technical details -> format, encryption algorithm 
->payload -> user information -> vishoo's login -> email, password -> stateless
    -> standalone requests -> token client side-> encrypted token -> vishoo's token 
->Signature-> you can add one secret key to make the token even more secure and 
avoid getting lost or stolen


Usage:

npm i jsonwebtoken
implement as a middleware 



Environment Variables 

environment, secret key uri -> restrict -> github -> download 


Usage:

npm install dotenv

server security
it specifies the clients that can request my server 


npm i cors 

cross origin resource sharing policy


