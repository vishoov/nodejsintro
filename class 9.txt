API Security Interview Questions

1.What is encryption, and how is it used to protect data?

Encryption is the process of converting readable data (plaintext) into an unreadable format (ciphertext) using an algorithm and a key. Only those with the correct decryption key can convert it back to readable form.

It is used to protect data by ensuring that even if unauthorized users gain access to it (e.g., through hacking or interception), they cannot understand or use the information without the decryption key. This is essential for securing sensitive data like passwords, personal information, financial records, and communications.


2.What could happen if an API does not implement rate limiting?

If an API does not implement rate limiting, it can be abused by automated scripts or attackers. This may lead to:

Denial of Service (DoS) due to overwhelming traffic

Excessive resource usage, increasing server costs

Data scraping or brute-force attacks, especially on login forms

3.How would you apply rate limiting to only specific routes in your Node.js app?
using the express-rate-limit middleware, we can apply rate limiting to specific routes like this:

const rateLimit = require('express-rate-limit');

const loginLimiter = rateLimit({

  windowMs: 15 * 60 * 1000, 

  max: 5 

});

app.post('/login', loginLimiter, (req, res) => {

  // we can write login logic here

});

4.Why is it important to hash passwords before storing them in a database?

Hashing passwords protects users credentials by transforming them into fixed-length strings that are not easily reversible. If the database is compromised, attackers cannot retrieve the original passwords directly, reducing the impact of the breach.


5.What is a salt in the context of password hashing, and why is it used?

A salt is a random string added to a password before hashing it. It ensures that even if two users have the same password, their hashes will differ. This:

Prevents use of precomputed hash tables (rainbow tables)

Increases resistance to brute-force and dictionary attacks



HTTP

- The HTTP protocol is a unidirectional protocol that works on top of TCP protocol which is a connection-oriented transport layer protocol, we can create the connection by using HTTP request methods after getting the response HTTP connection get closed.

- Simple RESTful application uses HTTP protocol which is stateless.

-It is used when we do not want to retain a connection for a particular amount of time or reuse the connection for transmitting data.


WebRTC - real time communication
webSocket-> technology that is used to implement real time communication

Faster communication
bidirectional -> Notification 
low latency


-WebSocket is a bidirectional communication protocol that can send the data from the client to the server or from the server to the client by reusing the established LIVE connection channel. The connection is kept alive until terminated by either the client or the server.

-Almost all the real-time applications like (trading, monitoring, notification, chatting, calling) services use WebSocket to receive the data on a single communication channel

-All the frequently updated applications used WebSocket because it is faster than HTTP Connection.


Feature         	WebRTC	                    HTTP
Connection Type	    Peer-to-peer (real-time)	Client-server (request-response)
Use Case	        Audio/video calls, live     Website browsing, 
                    streaming, file sharing     API calls, form submissions	
                     
Latency	            Very low (real-time     	Higher latency (not real-time)
                    communication)
Direction	        Bi-directional          	Uni-directional per request (client initiates)
                    (both peers send/receive data)
Protocol	        Uses UDP via protocols   	Uses TCP (typically via HTTP/1.1 or HTTP/2)
                    like SRTP and SCTP
Media Handling	    Supports audio/video streams	Does not support media streaming natively





